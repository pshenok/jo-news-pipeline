version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: jo-news-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama:latest
    container_name: jo-news-ollama
    ports:
      - "11434:11434"
    expose:
      - 11434
    volumes:
      - ./ollama:/root/.ollama
    entrypoint: ["/bin/sh", "-c"]
    environment:
      - OLLAMA_MODEL=${LLM_MODEL}
    command: >
      "ollama serve &
      sleep 10 &&
      ollama pull ${LLM_MODEL} &&
      wait"
    env_file:
     - .env
    deploy:
      resources:
        limits:
          memory: 4G

  dagster:
    build: .
    container_name: jo-news-dagster
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SCRAPER_LIMIT: ${SCRAPER_LIMIT}
      OLLAMA_HOST: ollama
      OLLAMA_PORT: 11434
      LLM_MODEL: ${LLM_MODEL}
    ports:
      - "${DAGSTER_PORT}:3000"
    volumes:
      - ./dagster_home:/opt/dagster/home
      - ./src:/app/src
    command: ["dagster", "dev", "-h", "0.0.0.0", "-p", "3000", "-m", "src.definitions"]

  api:
    build: .
    container_name: jo-news-api
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
